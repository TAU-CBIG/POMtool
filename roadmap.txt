Here is file with some idea on roadmap

Rethink what run and merge means:
 - run should take argument task, to specify what we want as our output
 - merge should be same as run, except it has already been run, and results exists

Add optimize

Split the config into multiple files
 - Concatenate files, multiple config file input allowed

Actually start using IDs
 - Then we can have huge config files with several models, experiment etc
 - Have argument what result we want to generate (biomarker target would generate what is needed before that, so experiment relating to it would be run)
 - Perhaps allow using without ID, but give user warning what ID was assumed

Add arguments to replace things coming from config
 - User could then say that lets run `this` set of biomarkers but with different model
 - User can then define computations without target ID, forcing definition of the target model, experiment, or something similar in arguments
 - Example without config file could also be shown

(implementation hint for all previous: Just generate config file-like object at start of program, also using command-line arguments, all changes should simply go into main, no need to modify actual mechanisms of the run file)

Add option to remove data
 - Two options (not sure if we should implement both):
   * Delete user defined files (in model user would define generated files)
	 * Delete all files not generated by this tool (We know what files we can create, so we would filter based on that)
 - Delete should happen only after need for the file has been resolved, i.e. biomarkers have been calculated from the model

Add seed so people can get different results if they so desire

Start warning about unused config options

Add unit tests, as if people start using this tool, there should be way to figure out how components are used
 - Allows bigger refactors
 - New features should have unit tests
 - Some integration tests would be pretty nice too

Add documentation
 - It should always be up-to-date, after we create it

Add version number (and require it in config, so we can warn when we have braking changes)
 - So we can warn user if mismatch between features
 - Lets use https://antfu.me/posts/epoch-semver
	 - We have MAJOR.MINOR.PATCH with extra sauce
	 - n.n.+1 when bug is fixed
	 - n.+1.0 when functionality is added
	 - +1.0.0 when functionality is added that brakes backwards 
	 - -(MAJOR%1000)+1000.0.0 For new collection of features (so 1002.1.3 -> 2000.0.0)
	 - So first public version would be 1000.0.0
 
Give the name (perhaps POMTool?)

Add requirements

Add some nice way to install
 - This will require some refactoring
 - e.g. https://realpython.com/pypi-publish-python-package/

Start changelog
 - Each user facing change should be documented
